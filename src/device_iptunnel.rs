// This code was autogenerated with dbus-codegen-rust
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait DeviceIPTunnel {
    fn mode(&self) -> Result<u32, dbus::Error>;
    fn parent(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn local(&self) -> Result<String, dbus::Error>;
    fn remote(&self) -> Result<String, dbus::Error>;
    fn ttl(&self) -> Result<u8, dbus::Error>;
    fn tos(&self) -> Result<u8, dbus::Error>;
    fn path_mtu_discovery(&self) -> Result<bool, dbus::Error>;
    fn input_key(&self) -> Result<String, dbus::Error>;
    fn output_key(&self) -> Result<String, dbus::Error>;
    fn encapsulation_limit(&self) -> Result<u8, dbus::Error>;
    fn flow_label(&self) -> Result<u32, dbus::Error>;
    fn flags(&self) -> Result<u32, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> DeviceIPTunnel for blocking::Proxy<'a, C> {

    fn mode(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "Mode")
    }

    fn parent(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "Parent")
    }

    fn local(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "Local")
    }

    fn remote(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "Remote")
    }

    fn ttl(&self) -> Result<u8, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "Ttl")
    }

    fn tos(&self) -> Result<u8, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "Tos")
    }

    fn path_mtu_discovery(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "PathMtuDiscovery")
    }

    fn input_key(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "InputKey")
    }

    fn output_key(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "OutputKey")
    }

    fn encapsulation_limit(&self) -> Result<u8, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "EncapsulationLimit")
    }

    fn flow_label(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "FlowLabel")
    }

    fn flags(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.IPTunnel", "Flags")
    }
}
