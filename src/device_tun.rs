// This code was autogenerated with dbus-codegen-rust
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait DeviceTun {
    fn owner(&self) -> Result<i64, dbus::Error>;
    fn group(&self) -> Result<i64, dbus::Error>;
    fn mode(&self) -> Result<String, dbus::Error>;
    fn no_pi(&self) -> Result<bool, dbus::Error>;
    fn vnet_hdr(&self) -> Result<bool, dbus::Error>;
    fn multi_queue(&self) -> Result<bool, dbus::Error>;
    fn hw_address(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> DeviceTun for blocking::Proxy<'a, C> {

    fn owner(&self) -> Result<i64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.Tun", "Owner")
    }

    fn group(&self) -> Result<i64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.Tun", "Group")
    }

    fn mode(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.Tun", "Mode")
    }

    fn no_pi(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.Tun", "NoPi")
    }

    fn vnet_hdr(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.Tun", "VnetHdr")
    }

    fn multi_queue(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.Tun", "MultiQueue")
    }

    fn hw_address(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Device.Tun", "HwAddress")
    }
}
