// This code was autogenerated with `dbus-codegen-rust -c blocking --file target/nm-1.10.14/NetworkManager-1.10.14/introspection/org.freedesktop.NetworkManager.AgentManager.xml`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait AgentManager {
    fn register(&self, identifier: &str) -> Result<(), dbus::Error>;
    fn register_with_capabilities(&self, identifier: &str, capabilities: u32) -> Result<(), dbus::Error>;
    fn unregister(&self) -> Result<(), dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> AgentManager for blocking::Proxy<'a, C> {

    fn register(&self, identifier: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.NetworkManager.AgentManager", "Register", (identifier, ))
    }

    fn register_with_capabilities(&self, identifier: &str, capabilities: u32) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.NetworkManager.AgentManager", "RegisterWithCapabilities", (identifier, capabilities, ))
    }

    fn unregister(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.NetworkManager.AgentManager", "Unregister", ())
    }
}
